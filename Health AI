# healthcare_app.py
# ---------------------------------------------
# Streamlit Healthcare Assistant
# - Predicts risks for Diabetes, Heart Disease, Hypertension
# - Generates a simple care plan
# - Builds dashboards from uploaded CSV data
#
# DISCLAIMER: This tool is for educational use only and is NOT medical advice.
# Always consult licensed clinicians for diagnosis and treatment.
# ---------------------------------------------

import io
import json
import base64
import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st
from datetime import datetime

# ---------------------------
# Utility & risk calculations
# ---------------------------
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def compute_bmi(height_cm: float, weight_kg: float) -> float:
    if height_cm is None or weight_kg is None or height_cm <= 0:
        return np.nan
    return weight_kg / ((height_cm / 100) ** 2)

def clip_num(x, lo, hi):
    try:
        return float(np.clip(float(x), lo, hi))
    except Exception:
        return np.nan

def normalize(x, mean, std, lo=None, hi=None):
    """Z-score then clip to [-3, 3] for stability."""
    if x is None or pd.isna(x):
        return 0.0
    z = (float(x) - mean) / (std if std > 0 else 1.0)
    z = float(np.clip(z, -3, 3))
    if lo is not None and hi is not None:
        return float(np.clip(z, lo, hi))
    return z

def risk_model(features: dict):
    """
    Simple transparent rule-based scoring mapped through sigmoid to produce
    pseudo-probabilities. This is NOT a medical model.
    Inputs (features):
      age, sex, height_cm, weight_kg, bmi, systolic_bp, diastolic_bp,
      fasting_glucose, hba1c, total_chol, hdl, ldl,
      smoker(bool), family_history(bool), activity_minutes_per_week
    Returns dict of risks in [0,1].
    """

    # Extract features with defaults
    age = features.get("age", 35)
    bmi = features.get("bmi", np.nan)
    sys_bp = features.get("systolic_bp", 120)
    dia_bp = features.get("diastolic_bp", 80)
    fbg = features.get("fasting_glucose", 95)
    hba1c = features.get("hba1c", 5.3)
    chol = features.get("total_chol", 180)
    hdl = features.get("hdl", 50)
    ldl = features.get("ldl", 110)
    smoker = 1.0 if features.get("smoker", False) else 0.0
    fam = 1.0 if features.get("family_history", False) else 0.0
    act = features.get("activity_minutes_per_week", 60)

    # Normalizations (rough population-ish priors)
    n_age = normalize(age, 45, 12)
    n_bmi = normalize(bmi, 26, 5)
    n_sys = normalize(sys_bp, 125, 15)
    n_dia = normalize(dia_bp, 80, 10)
    n_fbg = normalize(fbg, 95, 12)
    n_a1c = normalize(hba1c, 5.4, 0.5)
    n_chol = normalize(chol, 190, 35)
    n_hdl = -normalize(hdl, 55, 12)  # higher HDL reduces risk
    n_ldl = normalize(ldl, 120, 30)
    n_act = -normalize(act, 120, 60)  # more activity reduces risk

    # Diabetes risk score
    # drivers: BMI, fasting glucose, HbA1c, age, activity, family history
    d_score = (
        0.9 * n_bmi
        + 1.2 * n_fbg
        + 1.2 * n_a1c
        + 0.5 * n_age
        + 0.5 * n_act
        + 0.6 * fam
        + 0.3 * smoker
        - 0.2  # baseline
    )
    diabetes = float(sigmoid(d_score))

    # Heart disease risk score
    # drivers: age, total chol, LDL, HDL (protective), BP, smoking, family history, activity
    h_score = (
        0.8 * n_age
        + 0.8 * n_chol
        + 0.7 * n_ldl
        + 0.6 * n_sys
        + 0.3 * n_dia
        + 0.8 * smoker
        + 0.6 * fam
        + 0.5 * n_bmi
        + 0.5 * n_act
        - 0.3
        + 0.8 * n_hdl  # already negative
    )
    heart = float(sigmoid(h_score))

    # Hypertension risk score
    # drivers: systolic/diastolic BP, BMI, age, smoking, family history, activity
    ht_score = (
        1.2 * n_sys
        + 0.8 * n_dia
        + 0.6 * n_bmi
        + 0.6 * n_age
        + 0.4 * smoker
        + 0.5 * fam
        + 0.4 * n_act
        - 0.2
    )
    htn = float(sigmoid(ht_score))

    return {
        "diabetes_risk": round(diabetes, 3),
        "heart_disease_risk": round(heart, 3),
        "hypertension_risk": round(htn, 3),
    }

def risk_band(p):
    if p >= 0.67:
        return "High"
    if p >= 0.34:
        return "Moderate"
    return "Low"

def make_care_plan(features, risks):
    bmi = features.get("bmi", np.nan)
    act = features.get("activity_minutes_per_week", 0)
    sys_bp = features.get("systolic_bp", 120)
    fbg = features.get("fasting_glucose", 95)
    hba1c = features.get("hba1c", 5.3)
    smoker = features.get("smoker", False)

    # Key risk bands
    d_band = risk_band(risks["diabetes_risk"])
    h_band = risk_band(risks["heart_disease_risk"])
    t_band = risk_band(risks["hypertension_risk"])

    plan = []
    plan.append("‚ö†Ô∏è This autogenerated plan is not medical advice. Consult a clinician.")

    # General
    if pd.notna(bmi):
        if bmi >= 30:
            plan.append("‚Ä¢ Weight management: target 5‚Äì10% weight loss over 6‚Äì12 months.")
        elif bmi >= 25:
            plan.append("‚Ä¢ Aim to reach BMI < 25 with gradual lifestyle changes.")
        else:
            plan.append("‚Ä¢ Maintain current healthy weight with balanced nutrition.")

    if act < 150:
        plan.append("‚Ä¢ Physical activity: build to ‚â•150 min/week moderate activity (+ 2 strength days).")
    else:
        plan.append("‚Ä¢ Keep ‚â•150 min/week activity; add flexibility/strength work 2‚Äì3√ó/week.")

    if smoker:
        plan.append("‚Ä¢ Smoking: begin a cessation plan (set quit date, NRT or meds per clinician).")

    # Condition-specific
    if d_band in ["Moderate", "High"] or fbg >= 100 or hba1c >= 5.7:
        plan.append("‚Ä¢ Glucose management: reduce refined carbs/sugary drinks; prefer high-fiber foods.")
        plan.append("‚Ä¢ Monitor fasting glucose weekly; discuss HbA1c testing cadence (e.g., q3‚Äì6 months).")

    if t_band in ["Moderate", "High"] or sys_bp >= 130:
        plan.append("‚Ä¢ BP: limit sodium (~1.5‚Äì2 g/day), follow DASH-style diet, regular home BP logs.")
        plan.append("‚Ä¢ Sleep hygiene: 7‚Äì9 h/night; screen for sleep apnea if snoring/daytime fatigue.")

    if h_band in ["Moderate", "High"]:
        plan.append("‚Ä¢ Lipids/heart: prioritize unsaturated fats, fish 2√ó/week, soluble fiber.")
        plan.append("‚Ä¢ Add stress management: daily 10-min breathing/meditation; social support.")

    # Follow-up
    plan.append("‚Ä¢ Schedule preventive care visit; share home logs (BP/weight/glucose) with clinician.")
    return "\n".join(plan)

def to_download_button(data: bytes, filename: str, label: str):
    b64 = base64.b64encode(data).decode()
    href = f'<a href="data:file/txt;base64,{b64}" download="{filename}">{label}</a>'
    return href

# ---------------------------
# Streamlit UI
# ---------------------------
st.set_page_config(page_title="Healthcare Assistant", page_icon="ü©∫", layout="wide")

st.title("ü©∫ Healthcare Assistant (Demo)")
st.caption("Educational tool ‚Äî not for medical use.")

with st.sidebar:
    st.header("Patient Intake")
    colA, colB = st.columns(2)
    with colA:
        age = st.number_input("Age", min_value=0, max_value=120, value=35, step=1)
        height_cm = st.number_input("Height (cm)", min_value=80, max_value=250, value=170)
        systolic_bp = st.number_input("Systolic BP", min_value=70, max_value=250, value=122)
        fasting_glucose = st.number_input("Fasting Glucose (mg/dL)", min_value=50, max_value=400, value=95)
        total_chol = st.number_input("Total Cholesterol (mg/dL)", min_value=80, max_value=400, value=180)
        hdl = st.number_input("HDL (mg/dL)", min_value=10, max_value=120, value=50)
    with colB:
        sex = st.selectbox("Sex", ["Female", "Male", "Other"])
        weight_kg = st.number_input("Weight (kg)", min_value=20.0, max_value=250.0, value=70.0, step=0.1)
        diastolic_bp = st.number_input("Diastolic BP", min_value=40, max_value=150, value=80)
        hba1c = st.number_input("HbA1c (%)", min_value=4.0, max_value=15.0, value=5.3, step=0.1)
        ldl = st.number_input("LDL (mg/dL)", min_value=30, max_value=300, value=110)
        activity_minutes_per_week = st.number_input("Activity (min/week)", min_value=0, max_value=2000, value=60, step=10)

    smoker = st.checkbox("Currently smokes")
    family_history = st.checkbox("Family history of cardiometabolic disease")

    calc_bmi = compute_bmi(height_cm, weight_kg)
    st.markdown(f"**BMI:** {calc_bmi:.1f}" if not pd.isna(calc_bmi) else "**BMI:** ‚Äî")

    if st.button("Predict Risks"):
        st.session_state["inputs"] = {
            "age": age,
            "sex": sex,
            "height_cm": height_cm,
            "weight_kg": weight_kg,
            "bmi": calc_bmi,
            "systolic_bp": systolic_bp,
            "diastolic_bp": diastolic_bp,
            "fasting_glucose": fasting_glucose,
            "hba1c": hba1c,
            "total_chol": total_chol,
            "hdl": hdl,
            "ldl": ldl,
            "smoker": smoker,
            "family_history": family_history,
            "activity_minutes_per_week": activity_minutes_per_week,
        }
        st.session_state["risks"] = risk_model(st.session_state["inputs"])
        st.session_state["plan"] = make_care_plan(st.session_state["inputs"], st.session_state["risks"])

# Main layout
tab_pred, tab_plan, tab_dash, tab_help = st.tabs(
    ["üß™ Predictions", "üóÇ Care Plan", "üìä Dashboards", "‚ÑπÔ∏è Help & Template"]
)

with tab_pred:
    st.subheader("Predicted Risks")
    if "risks" in st.session_state:
        risks = st.session_state["risks"]
        df_risk = pd.DataFrame(
            {
                "Condition": ["Diabetes", "Heart Disease", "Hypertension"],
                "Risk": [risks["diabetes_risk"], risks["heart_disease_risk"], risks["hypertension_risk"]],
                "Band": [
                    risk_band(risks["diabetes_risk"]),
                    risk_band(risks["heart_disease_risk"]),
                    risk_band(risks["hypertension_risk"]),
                ],
            }
        )
        c1, c2 = st.columns([2, 1])
        with c1:
            fig = px.bar(
                df_risk, x="Condition", y="Risk", color="Band", range_y=[0, 1],
                text=df_risk["Risk"].map(lambda x: f"{x:.2f}")
            )
            fig.update_layout(yaxis_title="Risk (0‚Äì1)", xaxis_title="", uniformtext_minsize=10, uniformtext_mode="hide")
            st.plotly_chart(fig, use_container_width=True)
        with c2:
            st.dataframe(df_risk, use_container_width=True)
        st.success("Predictions generated. See the Care Plan tab for suggestions.")
    else:
        st.info("Use the sidebar to enter patient details and click **Predict Risks**.")

with tab_plan:
    st.subheader("Autogenerated Care Plan (Demo)")
    if "plan" in st.session_state and "inputs" in st.session_state:
        st.text(st.session_state["plan"])

        # Download plan with inputs and risks as a text file
        report = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "inputs": st.session_state["inputs"],
            "risks": st.session_state["risks"],
            "plan": st.session_state["plan"],
        }
        txt = (
            "Healthcare Assistant Report (Demo)\n"
            "=================================\n\n"
            f"Timestamp (UTC): {report['timestamp']}\n\n"
            "Inputs:\n"
            + json.dumps(report["inputs"], indent=2)
            + "\n\nRisks:\n"
            + json.dumps(report["risks"], indent=2)
            + "\n\nPlan:\n"
            + report["plan"]
            + "\n"
        ).encode()
        st.download_button(
            "Download Plan & Report (.txt)",
            data=txt,
            file_name="healthcare_plan_report.txt",
            mime="text/plain",
        )
    else:
        st.info("No plan yet. Generate predictions first.")

with tab_dash:
    st.subheader("Population Dashboard")
    st.caption("Upload a CSV of patients to visualize risks and metrics. Columns are auto-detected.")
    sample_cols = [
        "patient_id","age","sex","height_cm","weight_kg","systolic_bp","diastolic_bp",
        "fasting_glucose","hba1c","total_chol","hdl","ldl","smoker","family_history","activity_minutes_per_week"
    ]
    uploaded = st.file_uploader("Upload CSV", type=["csv"])

    if uploaded is not None:
        df = pd.read_csv(uploaded)
        # Ensure required columns exist; create if missing
        for col in sample_cols:
            if col not in df.columns:
                df[col] = np.nan

        # Compute BMI
        df["bmi"] = df.apply(lambda r: compute_bmi(r["height_cm"], r["weight_kg"]), axis=1)

        # Coarse type fixes
        for bcol in ["smoker", "family_history"]:
            if bcol in df.columns:
                df[bcol] = df[bcol].map(lambda x: 1 if str(x).strip().lower() in ["1","true","yes","y"] else 0)

        # Risk predictions per row
        def row_risks(r):
            feats = {
                "age": r.get("age", np.nan),
                "sex": r.get("sex", "Other"),
                "height_cm": r.get("height_cm", np.nan),
                "weight_kg": r.get("weight_kg", np.nan),
                "bmi": r.get("bmi", np.nan),
                "systolic_bp": r.get("systolic_bp", np.nan),
                "diastolic_bp": r.get("diastolic_bp", np.nan),
                "fasting_glucose": r.get("fasting_glucose", np.nan),
                "hba1c": r.get("hba1c", np.nan),
                "total_chol": r.get("total_chol", np.nan),
                "hdl": r.get("hdl", np.nan),
                "ldl": r.get("ldl", np.nan),
                "smoker": bool(r.get("smoker", 0)),
                "family_history": bool(r.get("family_history", 0)),
                "activity_minutes_per_week": r.get("activity_minutes_per_week", np.nan),
            }
            return risk_model(feats)

        risks_list = df.apply(row_risks, axis=1)
        df["diabetes_risk"] = risks_list.map(lambda d: d["diabetes_risk"])
        df["heart_disease_risk"] = risks_list.map(lambda d: d["heart_disease_risk"])
        df["hypertension_risk"] = risks_list.map(lambda d: d["hypertension_risk"])

        # Banding
        df["diabetes_band"] = df["diabetes_risk"].map(risk_band)
        df["heart_band"] = df["heart_disease_risk"].map(risk_band)
        df["hypertension_band"] = df["hypertension_risk"].map(risk_band)

        st.markdown("### Overview")
        k1, k2, k3, k4 = st.columns(4)
        k1.metric("Patients", len(df))
        k2.metric("Avg BMI", f"{df['bmi'].mean():.1f}")
        k3.metric("Avg Systolic BP", f"{df['systolic_bp'].mean():.0f}")
        k4.metric("Avg Fasting Glucose", f"{df['fasting_glucose'].mean():.0f}")

        st.markdown("### Risk Distribution")
        c1, c2 = st.columns(2)
        with c1:
            fig1 = px.histogram(df, x="diabetes_risk", nbins=20, title="Diabetes Risk")
            st.plotly_chart(fig1, use_container_width=True)
            fig2 = px.histogram(df, x="heart_disease_risk", nbins=20, title="Heart Disease Risk")
            st.plotly_chart(fig2, use_container_width=True)
        with c2:
            fig3 = px.histogram(df, x="hypertension_risk", nbins=20, title="Hypertension Risk")
            st.plotly_chart(fig3, use_container_width=True)
            band_counts = df[["diabetes_band","heart_band","hypertension_band"]].melt(var_name="type", value_name="band")
            fig4 = px.bar(band_counts.value_counts().reset_index().rename(columns={"count":"n"}),
                          x="type", y="n", color="band", title="Risk Bands Count")
            st.plotly_chart(fig4, use_container_width=True)

        st.markdown("### Relationships")
        r1, r2 = st.columns(2)
        with r1:
            fig5 = px.scatter(df, x="bmi", y="fasting_glucose", color="diabetes_band", title="BMI vs Fasting Glucose")
            st.plotly_chart(fig5, use_container_width=True)
        with r2:
            fig6 = px.scatter(df, x="systolic_bp", y="diastolic_bp", color="hypertension_band", title="BP Scatter")
            st.plotly_chart(fig6, use_container_width=True)

        st.markdown("### Data Preview")
        st.dataframe(df.head(50), use_container_width=True)

        # Download enriched dataset
        out = io.StringIO()
        df.to_csv(out, index=False)
        st.download_button(
            "Download Enriched CSV",
            data=out.getvalue().encode(),
            file_name="patients_enriched.csv",
            mime="text/csv",
        )
    else:
        st.info("Upload a CSV to see cohort dashboards.")

with tab_help:
    st.subheader("How to Use")
    st.markdown(
        """
1) **Enter patient details** in the sidebar ‚Üí click **Predict Risks**
2) See **Predictions** and **Care Plan**
3) Upload a CSV in **Dashboards** to visualize a population

**CSV Template Columns** (case-sensitive):
- `patient_id` (str/int)
- `age` (int), `sex` (Female/Male/Other)
- `height_cm`, `weight_kg`
- `systolic_bp`, `diastolic_bp`
- `fasting_glucose`, `hba1c`
- `total_chol`, `hdl`, `ldl`
- `smoker` (1/0, yes/no/true/false)
- `family_history` (1/0, yes/no/true/false)
- `activity_minutes_per_week`
"""
    )

    # Provide a downloadable sample CSV
    sample = pd.DataFrame({
        "patient_id": [f"P{i:03d}" for i in range(1, 31)],
        "age": np.random.randint(25, 75, 30),
        "sex": np.random.choice(["Female","Male","Other"], 30, p=[0.48,0.48,0.04]),
        "height_cm": np.random.normal(168, 10, 30).round(0).clip(145, 195),
        "weight_kg": np.random.normal(75, 15, 30).round(1).clip(45, 140),
        "systolic_bp": np.random.normal(128, 16, 30).round(0).clip(90, 200),
        "diastolic_bp": np.random.normal(82, 10, 30).round(0).clip(55, 120),
        "fasting_glucose": np.random.normal(98, 15, 30).round(0).clip(65, 240),
        "hba1c": np.random.normal(5.6, 0.7, 30).round(1).clip(4.5, 11.0),
        "total_chol": np.random.normal(190, 35, 30).round(0).clip(110, 320),
        "hdl": np.random.normal(52, 12, 30).round(0).clip(25, 90),
        "ldl": np.random.normal(120, 30, 30).round(0).clip(60, 220),
        "smoker": np.random.choice([0,1], 30, p=[0.75,0.25]),
        "family_history": np.random.choice([0,1], 30, p=[0.7,0.3]),
        "activity_minutes_per_week": np.random.normal(110, 70, 30).round(0).clip(0, 600),
    })
    sample["bmi"] = sample.apply(lambda r: compute_bmi(r["height_cm"], r["weight_kg"]), axis=1)
    csv_bytes = sample.to_csv(index=False).encode()
    st.download_button(
        "Download Sample CSV",
        data=csv_bytes,
        file_name="sample_patients.csv",
        mime="text/csv",
    )

# Footer disclaimer
st.write("---")
st.caption("¬© 2025 Demo. For education only. Not a medical device or diagnostic tool.")
